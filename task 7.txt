{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "nJ1Bdkg4xjoS",
        "outputId": "5c165e10-1716-4d0d-a168-f9397712e038"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üöÄ SALES DATA ANALYSIS - TASK 7\n",
            "========================================\n",
            "üìã Creating sample database...\n",
            "‚úÖ Sample database 'sales_data.db' created successfully!\n",
            "üìä Inserted 10 sales records with 5 different products\n",
            "\n",
            "üîó Connecting to sales_data.db...\n",
            "\n",
            "üìà Running SQL Query 1: Product-wise Sales Summary\n",
            "üîç Product-wise Sales Summary:\n",
            "      product  total_qty  revenue  num_transactions  avg_price\n",
            "0      Laptop          8  7999.92                 2     999.99\n",
            "1  Headphones         38  5699.62                 2     149.99\n",
            "2     Monitor         14  4199.86                 2     299.99\n",
            "3    Keyboard         27  2159.73                 2      79.99\n",
            "4       Mouse         55  1649.45                 2      29.99\n",
            "\n",
            "üìä Running SQL Query 2: Overall Sales Summary\n",
            "üåü Overall Sales Summary:\n",
            "   total_transactions  total_items_sold  total_revenue  avg_transaction_value\n",
            "0                  10               142       21708.58               2170.858\n",
            "\n",
            "üìä Creating visualizations...\n",
            "üíæ Chart saved as 'sales_chart.png'\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "üèÜ TOP PERFORMING PRODUCT:\n",
            "   Product: Laptop\n",
            "   Revenue: $7,999.92\n",
            "   Quantity Sold: 8 units\n",
            "   Transactions: 2\n",
            "\n",
            "‚úÖ Database connection closed successfully!\n",
            "\n",
            "üéØ TASK COMPLETED SUCCESSFULLY!\n",
            "\n",
            "Files created:\n",
            "- sales_data.db (SQLite database)\n",
            "- sales_chart.png (Visualization)\n",
            "\n",
            "==================================================\n",
            "üìù INTERVIEW QUESTIONS & ANSWERS\n",
            "==================================================\n",
            "\n",
            "1. How did you connect Python to a database?\n",
            "   Answer: I used sqlite3.connect('sales_data.db') to establish connection to the SQLite database.\n",
            "\n",
            "2. What SQL query did you run?\n",
            "   Answer: I ran SELECT product, SUM(quantity) AS total_qty, SUM(quantity * price) AS revenue FROM sales GROUP BY product ORDER BY revenue DESC\n",
            "\n",
            "3. What does GROUP BY do?\n",
            "   Answer: GROUP BY groups rows with the same values in specified columns, allowing aggregate functions like SUM() to be applied to each group.\n",
            "\n",
            "4. How did you calculate revenue?\n",
            "   Answer: Revenue = quantity * price. I used SUM(quantity * price) to get total revenue per product.\n",
            "\n",
            "5. How did you visualize the result?\n",
            "   Answer: I used matplotlib to create bar charts showing revenue and quantity by product, with value labels on each bar.\n",
            "\n",
            "6. What does pandas do in your code?\n",
            "   Answer: Pandas converts SQL query results into DataFrames, making it easy to manipulate and analyze data in Python.\n",
            "\n",
            "7. What's the benefit of using SQL inside Python?\n",
            "   Answer: It combines SQL's powerful querying capabilities with Python's data analysis and visualization tools in one workflow.\n",
            "\n",
            "8. Could you run the same SQL query directly in DB Browser for SQLite?\n",
            "   Answer: Yes, the same SQL queries work in DB Browser for SQLite, but Python provides better automation and visualization options.\n"
          ]
        }
      ],
      "source": [
        "# DATA ANALYST INTERNSHIP - TASK 7\n",
        "# Get Basic Sales Summary from SQLite Database using Python\n",
        "\n",
        "import sqlite3\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "\n",
        "# Step 1: Create SQLite database and insert sample data\n",
        "def create_sample_database():\n",
        "    \"\"\"Create a sample sales database with realistic data\"\"\"\n",
        "\n",
        "    # Connect to SQLite database (creates file if doesn't exist)\n",
        "    conn = sqlite3.connect(\"sales_data.db\")\n",
        "    cursor = conn.cursor()\n",
        "\n",
        "    # Drop table if exists (for clean start)\n",
        "    cursor.execute(\"DROP TABLE IF EXISTS sales\")\n",
        "\n",
        "    # Create sales table\n",
        "    cursor.execute(\"\"\"\n",
        "        CREATE TABLE sales (\n",
        "            id INTEGER PRIMARY KEY,\n",
        "            product TEXT NOT NULL,\n",
        "            quantity INTEGER NOT NULL,\n",
        "            price REAL NOT NULL,\n",
        "            sale_date DATE\n",
        "        )\n",
        "    \"\"\")\n",
        "\n",
        "    # Insert sample data\n",
        "    sample_data = [\n",
        "        (1, 'Laptop', 5, 999.99, '2024-01-15'),\n",
        "        (2, 'Mouse', 25, 29.99, '2024-01-16'),\n",
        "        (3, 'Keyboard', 15, 79.99, '2024-01-17'),\n",
        "        (4, 'Monitor', 8, 299.99, '2024-01-18'),\n",
        "        (5, 'Laptop', 3, 999.99, '2024-01-19'),\n",
        "        (6, 'Mouse', 30, 29.99, '2024-01-20'),\n",
        "        (7, 'Keyboard', 12, 79.99, '2024-01-21'),\n",
        "        (8, 'Headphones', 20, 149.99, '2024-01-22'),\n",
        "        (9, 'Monitor', 6, 299.99, '2024-01-23'),\n",
        "        (10, 'Headphones', 18, 149.99, '2024-01-24')\n",
        "    ]\n",
        "\n",
        "    cursor.executemany(\"\"\"\n",
        "        INSERT INTO sales (id, product, quantity, price, sale_date)\n",
        "        VALUES (?, ?, ?, ?, ?)\n",
        "    \"\"\", sample_data)\n",
        "\n",
        "    conn.commit()\n",
        "    conn.close()\n",
        "    print(\"‚úÖ Sample database 'sales_data.db' created successfully!\")\n",
        "    print(\"üìä Inserted 10 sales records with 5 different products\")\n",
        "\n",
        "def analyze_sales_data():\n",
        "    \"\"\"Connect to database, run SQL queries, and create visualizations\"\"\"\n",
        "\n",
        "    # Step 2: Connect to SQLite database\n",
        "    print(\"\\nüîó Connecting to sales_data.db...\")\n",
        "    conn = sqlite3.connect(\"sales_data.db\")\n",
        "\n",
        "    # Step 3: Run SQL Query 1 - Product-wise summary\n",
        "    print(\"\\nüìà Running SQL Query 1: Product-wise Sales Summary\")\n",
        "    query1 = \"\"\"\n",
        "        SELECT\n",
        "            product,\n",
        "            SUM(quantity) AS total_qty,\n",
        "            SUM(quantity * price) AS revenue,\n",
        "            COUNT(*) as num_transactions,\n",
        "            AVG(price) as avg_price\n",
        "        FROM sales\n",
        "        GROUP BY product\n",
        "        ORDER BY revenue DESC\n",
        "    \"\"\"\n",
        "\n",
        "    # Load query results into pandas DataFrame\n",
        "    df_products = pd.read_sql_query(query1, conn)\n",
        "\n",
        "    print(\"üîç Product-wise Sales Summary:\")\n",
        "    print(df_products)\n",
        "\n",
        "    # Step 4: Run SQL Query 2 - Overall summary\n",
        "    print(\"\\nüìä Running SQL Query 2: Overall Sales Summary\")\n",
        "    query2 = \"\"\"\n",
        "        SELECT\n",
        "            COUNT(*) as total_transactions,\n",
        "            SUM(quantity) as total_items_sold,\n",
        "            SUM(quantity * price) as total_revenue,\n",
        "            AVG(quantity * price) as avg_transaction_value\n",
        "        FROM sales\n",
        "    \"\"\"\n",
        "\n",
        "    df_overall = pd.read_sql_query(query2, conn)\n",
        "\n",
        "    print(\"üåü Overall Sales Summary:\")\n",
        "    print(df_overall)\n",
        "\n",
        "    # Step 5: Create visualizations\n",
        "    print(\"\\nüìä Creating visualizations...\")\n",
        "\n",
        "    # Set up the plotting style\n",
        "    plt.style.use('default')\n",
        "    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n",
        "\n",
        "    # Chart 1: Revenue by Product (Bar Chart)\n",
        "    bars1 = ax1.bar(df_products['product'], df_products['revenue'],\n",
        "                    color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57'])\n",
        "    ax1.set_title('Revenue by Product', fontsize=14, fontweight='bold')\n",
        "    ax1.set_xlabel('Product')\n",
        "    ax1.set_ylabel('Revenue ($)')\n",
        "    ax1.tick_params(axis='x', rotation=45)\n",
        "\n",
        "    # Add value labels on bars\n",
        "    for bar in bars1:\n",
        "        height = bar.get_height()\n",
        "        ax1.text(bar.get_x() + bar.get_width()/2., height,\n",
        "                f'${height:,.0f}', ha='center', va='bottom')\n",
        "\n",
        "    # Chart 2: Quantity Sold by Product\n",
        "    bars2 = ax2.bar(df_products['product'], df_products['total_qty'],\n",
        "                    color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57'])\n",
        "    ax2.set_title('Total Quantity Sold by Product', fontsize=14, fontweight='bold')\n",
        "    ax2.set_xlabel('Product')\n",
        "    ax2.set_ylabel('Quantity Sold')\n",
        "    ax2.tick_params(axis='x', rotation=45)\n",
        "\n",
        "    # Add value labels on bars\n",
        "    for bar in bars2:\n",
        "        height = bar.get_height()\n",
        "        ax2.text(bar.get_x() + bar.get_width()/2., height,\n",
        "                f'{int(height)}', ha='center', va='bottom')\n",
        "\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # Save the chart\n",
        "    plt.savefig(\"sales_chart.png\", dpi=300, bbox_inches='tight')\n",
        "    print(\"üíæ Chart saved as 'sales_chart.png'\")\n",
        "\n",
        "    # Show the plot\n",
        "    plt.show()\n",
        "\n",
        "    # Step 6: Additional Analysis - Top performing product\n",
        "    top_product = df_products.iloc[0]\n",
        "    print(f\"\\nüèÜ TOP PERFORMING PRODUCT:\")\n",
        "    print(f\"   Product: {top_product['product']}\")\n",
        "    print(f\"   Revenue: ${top_product['revenue']:,.2f}\")\n",
        "    print(f\"   Quantity Sold: {top_product['total_qty']} units\")\n",
        "    print(f\"   Transactions: {top_product['num_transactions']}\")\n",
        "\n",
        "    # Close database connection\n",
        "    conn.close()\n",
        "    print(\"\\n‚úÖ Database connection closed successfully!\")\n",
        "\n",
        "def main():\n",
        "    \"\"\"Main function to run the complete analysis\"\"\"\n",
        "    print(\"üöÄ SALES DATA ANALYSIS - TASK 7\")\n",
        "    print(\"=\" * 40)\n",
        "\n",
        "    # Create database if it doesn't exist\n",
        "    if not os.path.exists(\"sales_data.db\"):\n",
        "        print(\"üìã Creating sample database...\")\n",
        "        create_sample_database()\n",
        "    else:\n",
        "        print(\"üìã Using existing database...\")\n",
        "\n",
        "    # Run the analysis\n",
        "    analyze_sales_data()\n",
        "\n",
        "    print(\"\\nüéØ TASK COMPLETED SUCCESSFULLY!\")\n",
        "    print(\"\\nFiles created:\")\n",
        "    print(\"- sales_data.db (SQLite database)\")\n",
        "    print(\"- sales_chart.png (Visualization)\")\n",
        "\n",
        "# Interview Questions Answers\n",
        "def print_interview_answers():\n",
        "    \"\"\"Print answers to the interview questions\"\"\"\n",
        "    print(\"\\n\" + \"=\"*50)\n",
        "    print(\"üìù INTERVIEW QUESTIONS & ANSWERS\")\n",
        "    print(\"=\"*50)\n",
        "\n",
        "    answers = [\n",
        "        (\"How did you connect Python to a database?\",\n",
        "         \"I used sqlite3.connect('sales_data.db') to establish connection to the SQLite database.\"),\n",
        "\n",
        "        (\"What SQL query did you run?\",\n",
        "         \"I ran SELECT product, SUM(quantity) AS total_qty, SUM(quantity * price) AS revenue FROM sales GROUP BY product ORDER BY revenue DESC\"),\n",
        "\n",
        "        (\"What does GROUP BY do?\",\n",
        "         \"GROUP BY groups rows with the same values in specified columns, allowing aggregate functions like SUM() to be applied to each group.\"),\n",
        "\n",
        "        (\"How did you calculate revenue?\",\n",
        "         \"Revenue = quantity * price. I used SUM(quantity * price) to get total revenue per product.\"),\n",
        "\n",
        "        (\"How did you visualize the result?\",\n",
        "         \"I used matplotlib to create bar charts showing revenue and quantity by product, with value labels on each bar.\"),\n",
        "\n",
        "        (\"What does pandas do in your code?\",\n",
        "         \"Pandas converts SQL query results into DataFrames, making it easy to manipulate and analyze data in Python.\"),\n",
        "\n",
        "        (\"What's the benefit of using SQL inside Python?\",\n",
        "         \"It combines SQL's powerful querying capabilities with Python's data analysis and visualization tools in one workflow.\"),\n",
        "\n",
        "        (\"Could you run the same SQL query directly in DB Browser for SQLite?\",\n",
        "         \"Yes, the same SQL queries work in DB Browser for SQLite, but Python provides better automation and visualization options.\")\n",
        "    ]\n",
        "\n",
        "    for i, (question, answer) in enumerate(answers, 1):\n",
        "        print(f\"\\n{i}. {question}\")\n",
        "        print(f\"   Answer: {answer}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n",
        "    print_interview_answers()"
      ]
    }
  ]
}